// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String    @db.Uuid @id
  userName        String    @unique
  createdAt       DateTime  @db.Timestamptz() @default(now())
  updatedAt       DateTime  @db.Timestamptz() @updatedAt
  deletedAt       DateTime? @db.Timestamptz()

  userLiveEvent   UserLiveEvent[]
}

model UserLiveEvent {
  userLiveEventId String      @db.Uuid @id
  userId          String      @db.Uuid
  liveEventId     String      @db.Uuid
  createdAt       DateTime    @db.Timestamptz() @default(now())
  updatedAt       DateTime    @db.Timestamptz() @updatedAt
  deletedAt       DateTime?   @db.Timestamptz()

  user            User        @relation(fields: [userId], references: [userId])
  liveEvent       LiveEvent   @relation(fields: [liveEventId], references: [liveEventId])
  @@unique([userId, liveEventId])
}

model LiveEvent {
  liveEventId     String      @db.Uuid @id
  title           String
  date            DateTime    @db.Date
  startTime       DateTime?   @db.Time
  endTime         DateTime?   @db.Time
  detail          String?
  review          String?
  createdAt       DateTime    @db.Timestamptz() @default(now())
  updatedAt       DateTime    @db.Timestamptz() @updatedAt
  deletedAt       DateTime?   @db.Timestamptz()

  userLiveEvent   UserLiveEvent[]
  liveEventVenue  LiveEventVenue[]
  liveEventArtist LiveEventArtist[]
  setList         SetList?
  liveEventPhoto  LiveEventPhoto[]
}

model LiveEventVenue {
  liveEventVenueId  String    @db.Uuid @id
  liveEventId       String    @db.Uuid
  name              String
  addressUrl        String
  createdAt         DateTime  @db.Timestamptz() @default(now())
  updatedAt         DateTime  @db.Timestamptz() @updatedAt
  deletedAt         DateTime? @db.Timestamptz()

  liveEvent         LiveEvent @relation(fields: [liveEventId], references: [liveEventId])
}

model LiveEventArtist {
  liveEventArtistId String    @db.Uuid @id
  liveEventId       String    @db.Uuid
  name              String
  spotifyArtistUrl  String
  createdAt         DateTime  @db.Timestamptz() @default(now())
  updatedAt         DateTime  @db.Timestamptz() @updatedAt
  deletedAt         DateTime? @db.Timestamptz()

  liveEvent         LiveEvent @relation(fields: [liveEventId], references: [liveEventId])
}

model SetList {
  setListId       String      @db.Uuid @id
  liveEventId     String      @db.Uuid @unique
  createdAt       DateTime    @db.Timestamptz() @default(now())
  updatedAt       DateTime    @db.Timestamptz() @updatedAt
  deletedAt       DateTime?   @db.Timestamptz()

  setListSong     SetListSong[]
  liveEvent       LiveEvent @relation(fields: [liveEventId], references: [liveEventId])
}

model SetListSong {
  setListSongId   String      @db.Uuid @id
  setListId       String      @db.Uuid
  order           Int
  title           String
  artistName      String
  spotifySongUrl  String
  createdAt       DateTime    @db.Timestamptz() @default(now())
  updatedAt       DateTime    @db.Timestamptz() @updatedAt
  deletedAt       DateTime?   @db.Timestamptz()

  setList         SetList @relation(fields: [setListId], references: [setListId])
}

model LiveEventPhoto {
  liveEventPhotoId  String      @db.Uuid @id
  liveEventId       String      @db.Uuid
  photoId           String      @db.Uuid
  description       String
  createdAt         DateTime    @db.Timestamptz() @default(now())
  updatedAt         DateTime    @db.Timestamptz() @updatedAt
  deletedAt         DateTime?   @db.Timestamptz()

  liveEvent         LiveEvent   @relation(fields: [liveEventId], references: [liveEventId])
  photo             Photo       @relation(fields: [photoId], references: [photoId])
}

model Photo {
  photoId           String      @db.Uuid @id
  photoUrl          String
  createdAt         DateTime    @db.Timestamptz() @default(now())
  updatedAt         DateTime    @db.Timestamptz() @updatedAt
  deletedAt         DateTime?   @db.Timestamptz()

  liveEventPhoto    LiveEventPhoto[]
}